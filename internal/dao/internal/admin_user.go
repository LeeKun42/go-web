// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// AdminUserDao is the data access object for table jjcc_admin_user.
type AdminUserDao struct {
	table   string           // table is the underlying table name of the DAO.
	group   string           // group is the database configuration group name of current DAO.
	columns AdminUserColumns // columns contains all the column names of Table for convenient usage.
}

// AdminUserColumns defines and stores column names for table jjcc_admin_user.
type AdminUserColumns struct {
	Id             string // 主键ID
	DingUserId     string // 钉钉用户ID,很长，必须为varchar
	Mobile         string // 管理员账号
	Name           string // 管理员姓名
	Passwd         string // 登录密码
	Sex            string // 0未知 1男 2女
	BkOrgId        string //
	Email          string // 邮箱
	Status         string // 状态 0：正常  1：冻结
	IsExternalUser string // 是否外部用户
	IsBuiltinUser  string // 是否系统内置用户
	LastLoginTime  string // 最后登录时间
	LastLoginIp    string // 最后登录IP
	IsBind         string // 是否绑定酷家乐账号：0否 1是
	JobNumber      string // 工号
	Position       string // 职位
	LeaderId       string //
	EntryTime      string // 入职时间
	IsInit         string // 是否是初始化状态：0否 1是
	Source         string // 创建来源：0：erp后台  1：接口
	IsShow         string // 是否显示在后台:1显示，0否
	Avatar         string // 用户头像（暂时用于竣工调研）
	CreateTime     string // 创建时间
	UpdateTime     string // 最后更新时间
}

//  adminUserColumns holds the columns for table jjcc_admin_user.
var adminUserColumns = AdminUserColumns{
	Id:             "id",
	DingUserId:     "ding_user_id",
	Mobile:         "mobile",
	Name:           "name",
	Passwd:         "passwd",
	Sex:            "sex",
	BkOrgId:        "bk_org_id",
	Email:          "email",
	Status:         "status",
	IsExternalUser: "is_external_user",
	IsBuiltinUser:  "is_builtin_user",
	LastLoginTime:  "last_login_time",
	LastLoginIp:    "last_login_ip",
	IsBind:         "is_bind",
	JobNumber:      "job_number",
	Position:       "position",
	LeaderId:       "leader_id",
	EntryTime:      "entry_time",
	IsInit:         "is_init",
	Source:         "source",
	IsShow:         "is_show",
	Avatar:         "avatar",
	CreateTime:     "create_time",
	UpdateTime:     "update_time",
}

// NewAdminUserDao creates and returns a new DAO object for table data access.
func NewAdminUserDao() *AdminUserDao {
	return &AdminUserDao{
		group:   "default",
		table:   "jjcc_admin_user",
		columns: adminUserColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *AdminUserDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *AdminUserDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *AdminUserDao) Columns() AdminUserColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *AdminUserDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *AdminUserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *AdminUserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
